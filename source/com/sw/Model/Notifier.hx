package com.sw;class Notifier {    private var _observers:Map <String, Array<Observer>>;    public function new() {    }    /**     * [addObserver  添加观察者]     * @param property [观察者属性，用于区分不同类别的观察者，例如战场，商店，人物属性等等]     * @param observer [观察者]     */    public function addObserver(property:String, observer:Observer) : Void    {        var tmp:Array<Observer> = null;        if (getObservers().exists(property))        {            getObservers().get(property).push(observer);        }        else        {            tmp = [];            tmp.push(observer);            getObservers().set(property, tmp);        }    }    /**     * [removeObserver 移除一个观察者]     * @param  property [观察者类型属性]     * @param  observer [观察者]     */    public function removeObserver(property:String, observer:Observer) : Void    {        var tmp:Array<Observer> = null;        if (getObservers().exists(property))        {            tmp = getObservers().get(property);            if (tmp != null)            {                var index:int = tmp.indexOf(observer);                if (index > 0)                {                    tmp.splice(index, 1);                }            }        }    }    public function removeAllObservers() : Void    {        _observers = null;    }    private function getObservers() : Map<String, Array<Observer>>    {        if (_observers == null)        {            _observers = new Map<String, Array<Observer>>();        }        return _observers;    }}